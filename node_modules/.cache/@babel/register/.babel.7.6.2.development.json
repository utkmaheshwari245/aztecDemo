{
  "{\"sourceRoot\":\"/Users/utkmaheshwari245/Work/Projects/myAztec/test\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"/Users/utkmaheshwari245/Work/Projects/myAztec\",\"filename\":\"/Users/utkmaheshwari245/Work/Projects/myAztec/test/testAztecProtocolWithERC20.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/utkmaheshwari245/Work/Projects/myAztec\",\"plugins\":[{\"key\":\"proposal-class-properties\",\"visitor\":{\"PrivateName\":{\"enter\":[null]},\"ExportDefaultDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.6.2": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/utkmaheshwari245/Work/Projects/myAztec/test",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "/Users/utkmaheshwari245/Work/Projects/myAztec",
      "filename": "/Users/utkmaheshwari245/Work/Projects/myAztec/test/testAztecProtocolWithERC20.js",
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/utkmaheshwari245/Work/Projects/myAztec",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-class-properties",
          "visitor": {
            "PrivateName": {
              "enter": [
                null
              ]
            },
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/utkmaheshwari245/Work/Projects/myAztec/test/testAztecProtocolWithERC20.js",
        "plugins": [
          "classProperties",
          "classPrivateProperties",
          "objectRestSpread",
          "asyncGenerators",
          "objectRestSpread",
          "jsonStrings",
          "optionalCatchBinding",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/utkmaheshwari245/Work/Projects/myAztec/test/testAztecProtocolWithERC20.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/utkmaheshwari245/Work/Projects/myAztec/test",
        "sourceFileName": "testAztecProtocolWithERC20.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _devUtils = _interopRequireDefault(require(\"@aztec/dev-utils\"));\n\nvar aztec = require('aztec.js');\n\nvar secp256k1 = require('@aztec/secp256k1');\n\nvar Ace = artifacts.require('./Ace.sol');\n\nvar ZkAssetMintable = artifacts.require('./ZkAssetMintable.sol');\n\nvar ERC20Mintable = artifacts.require('./ERC20Mintable.sol');\n\nvar MINT_PROOF = _devUtils[\"default\"].proofs.MINT_PROOF;\nvar JoinSplitProof = aztec.JoinSplitProof,\n    MintProof = aztec.MintProof;\ncontract('Test Aztec Privacy Protocol with ERC20 tokens', function (accounts) {\n  it('Test Unilateral Transfer of ERC20 tokens using Aztec protocol',\n  /*#__PURE__*/\n  (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee() {\n    var AceInstance, ZkAssetMintableInstance, ERC20MintableInstance, aliceEthereumAccount, bobEthereumAccount, aliceAztecAccount, bobAztecAccount, transferAmount, zeroValueNote, alice0Note, mintData, alice25Note, proof2, data2, signatures2, bob0Note, proof3, data3, signatures3;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Ace.deployed();\n\n          case 2:\n            AceInstance = _context.sent;\n            _context.next = 5;\n            return ZkAssetMintable.deployed();\n\n          case 5:\n            ZkAssetMintableInstance = _context.sent;\n            _context.next = 8;\n            return ERC20Mintable.deployed();\n\n          case 8:\n            ERC20MintableInstance = _context.sent;\n            aliceEthereumAccount = accounts[1];\n            bobEthereumAccount = accounts[2];\n            aliceAztecAccount = secp256k1.generateAccount();\n            bobAztecAccount = secp256k1.generateAccount();\n            transferAmount = 25; //initialize\n\n            _context.next = 16;\n            return ERC20MintableInstance.mint(aliceEthereumAccount, 100);\n\n          case 16:\n            _context.next = 18;\n            return ERC20MintableInstance.mint(bobEthereumAccount, 0);\n\n          case 18:\n            _context.next = 20;\n            return aztec.note.createZeroValueNote();\n\n          case 20:\n            zeroValueNote = _context.sent;\n            _context.next = 23;\n            return aztec.note.create(aliceAztecAccount.publicKey, 0);\n\n          case 23:\n            alice0Note = _context.sent;\n            mintData = new MintProof(zeroValueNote, alice0Note, [alice0Note], ZkAssetMintableInstance.address).encodeABI();\n            _context.next = 27;\n            return ZkAssetMintableInstance.confidentialMint(MINT_PROOF, mintData);\n\n          case 27:\n            _context.t0 = console;\n            _context.next = 30;\n            return ERC20MintableInstance.balanceOf(aliceEthereumAccount);\n\n          case 30:\n            _context.t1 = _context.sent;\n            _context.t2 = 'Alice\\'s balance : ' + _context.t1;\n\n            _context.t0.log.call(_context.t0, _context.t2);\n\n            _context.t3 = console;\n            _context.next = 36;\n            return ERC20MintableInstance.balanceOf(bobEthereumAccount);\n\n          case 36:\n            _context.t4 = _context.sent;\n            _context.t5 = 'Bob\\'s balance : ' + _context.t4;\n\n            _context.t3.log.call(_context.t3, _context.t5);\n\n            //step 1\n            console.log('Convert Alice\\'s ERC20 Tokens worth ' + transferAmount + ' to Alice\\'s Aztec Note worth ' + transferAmount);\n            _context.next = 42;\n            return aztec.note.create(aliceAztecAccount.publicKey, transferAmount);\n\n          case 42:\n            alice25Note = _context.sent;\n            proof2 = new JoinSplitProof([alice0Note], [alice25Note], accounts[0], -transferAmount, aliceEthereumAccount);\n            data2 = proof2.encodeABI(ZkAssetMintableInstance.address);\n            signatures2 = proof2.constructSignatures(ZkAssetMintableInstance.address, [aliceAztecAccount]);\n            _context.next = 48;\n            return ERC20MintableInstance.approve(AceInstance.address, transferAmount, {\n              from: aliceEthereumAccount\n            });\n\n          case 48:\n            _context.next = 50;\n            return AceInstance.publicApprove(ZkAssetMintableInstance.address, proof2.hash, transferAmount, {\n              from: aliceEthereumAccount\n            });\n\n          case 50:\n            _context.next = 52;\n            return ZkAssetMintableInstance.confidentialTransfer(data2, signatures2);\n\n          case 52:\n            _context.t6 = console;\n            _context.next = 55;\n            return ERC20MintableInstance.balanceOf(aliceEthereumAccount);\n\n          case 55:\n            _context.t7 = _context.sent;\n            _context.t8 = 'Alice\\'s balance : ' + _context.t7;\n\n            _context.t6.log.call(_context.t6, _context.t8);\n\n            _context.t9 = console;\n            _context.next = 61;\n            return ERC20MintableInstance.balanceOf(bobEthereumAccount);\n\n          case 61:\n            _context.t10 = _context.sent;\n            _context.t11 = 'Bob\\'s balance : ' + _context.t10;\n\n            _context.t9.log.call(_context.t9, _context.t11);\n\n            //step 2\n            console.log('Convert Alice\\'s Aztec Note worth ' + transferAmount + ' to Bob\\'s ERC20 Tokens worth ' + transferAmount);\n            _context.next = 67;\n            return aztec.note.create(bobAztecAccount.publicKey, 0);\n\n          case 67:\n            bob0Note = _context.sent;\n            proof3 = new JoinSplitProof([alice25Note], [bob0Note], accounts[0], transferAmount, bobEthereumAccount);\n            data3 = proof3.encodeABI(ZkAssetMintableInstance.address);\n            signatures3 = proof3.constructSignatures(ZkAssetMintableInstance.address, [aliceAztecAccount]);\n            _context.next = 73;\n            return ZkAssetMintableInstance.confidentialTransfer(data3, signatures3);\n\n          case 73:\n            _context.t12 = console;\n            _context.next = 76;\n            return ERC20MintableInstance.balanceOf(aliceEthereumAccount);\n\n          case 76:\n            _context.t13 = _context.sent;\n            _context.t14 = 'Alice\\'s balance : ' + _context.t13;\n\n            _context.t12.log.call(_context.t12, _context.t14);\n\n            _context.t15 = console;\n            _context.next = 82;\n            return ERC20MintableInstance.balanceOf(bobEthereumAccount);\n\n          case 82:\n            _context.t16 = _context.sent;\n            _context.t17 = 'Bob\\'s balance : ' + _context.t16;\n\n            _context.t15.log.call(_context.t15, _context.t17);\n\n          case 85:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })));\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "testAztecProtocolWithERC20.js"
      ],
      "names": [
        "aztec",
        "require",
        "secp256k1",
        "Ace",
        "artifacts",
        "ZkAssetMintable",
        "ERC20Mintable",
        "MINT_PROOF",
        "utils",
        "proofs",
        "JoinSplitProof",
        "MintProof",
        "contract",
        "accounts",
        "it",
        "deployed",
        "AceInstance",
        "ZkAssetMintableInstance",
        "ERC20MintableInstance",
        "aliceEthereumAccount",
        "bobEthereumAccount",
        "aliceAztecAccount",
        "generateAccount",
        "bobAztecAccount",
        "transferAmount",
        "mint",
        "note",
        "createZeroValueNote",
        "zeroValueNote",
        "create",
        "publicKey",
        "alice0Note",
        "mintData",
        "address",
        "encodeABI",
        "confidentialMint",
        "console",
        "balanceOf",
        "log",
        "alice25Note",
        "proof2",
        "data2",
        "signatures2",
        "constructSignatures",
        "approve",
        "from",
        "publicApprove",
        "hash",
        "confidentialTransfer",
        "bob0Note",
        "proof3",
        "data3",
        "signatures3"
      ],
      "mappings": "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",
      "sourceRoot": "/Users/utkmaheshwari245/Work/Projects/myAztec/test",
      "sourcesContent": [
        "import utils from '@aztec/dev-utils';\n\nconst aztec = require('aztec.js');\nconst secp256k1 = require('@aztec/secp256k1');\n\nconst Ace = artifacts.require('./Ace.sol');\nconst ZkAssetMintable = artifacts.require('./ZkAssetMintable.sol');\nconst ERC20Mintable = artifacts.require('./ERC20Mintable.sol');\n\nconst {proofs : {MINT_PROOF}} = utils;\nconst {JoinSplitProof, MintProof} = aztec;\n\ncontract('Test Aztec Privacy Protocol with ERC20 tokens', accounts => {\n\n    it('Test Unilateral Transfer of ERC20 tokens using Aztec protocol', async() => {\n\n        //setup\n        const AceInstance = await Ace.deployed();\n        const ZkAssetMintableInstance = await ZkAssetMintable.deployed();\n        const ERC20MintableInstance = await ERC20Mintable.deployed();\n        const aliceEthereumAccount = accounts[1];\n        const bobEthereumAccount = accounts[2];\n        const aliceAztecAccount = secp256k1.generateAccount();\n        const bobAztecAccount = secp256k1.generateAccount();\n        const transferAmount = 25;\n\n        //initialize\n        await ERC20MintableInstance.mint(aliceEthereumAccount, 100);\n        await ERC20MintableInstance.mint(bobEthereumAccount, 0);\n        const zeroValueNote = await aztec.note.createZeroValueNote();\n        const alice0Note = await aztec.note.create(aliceAztecAccount.publicKey, 0);\n        const mintData = new MintProof(zeroValueNote, alice0Note, [alice0Note], ZkAssetMintableInstance.address).encodeABI()\n        await ZkAssetMintableInstance.confidentialMint(MINT_PROOF, mintData);\n\n        console.log('Alice\\'s balance : ' + await ERC20MintableInstance.balanceOf(aliceEthereumAccount));\n        console.log('Bob\\'s balance : ' + await ERC20MintableInstance.balanceOf(bobEthereumAccount));\n\n        //step 1\n        console.log('Convert Alice\\'s ERC20 Tokens worth ' + transferAmount + ' to Alice\\'s Aztec Note worth ' + transferAmount);\n        const alice25Note = await aztec.note.create(aliceAztecAccount.publicKey, transferAmount);\n        const proof2 = new JoinSplitProof([alice0Note], [alice25Note], accounts[0], -transferAmount, aliceEthereumAccount);\n        const data2 = proof2.encodeABI(ZkAssetMintableInstance.address);\n        const signatures2 = proof2.constructSignatures(ZkAssetMintableInstance.address, [aliceAztecAccount]);\n        await ERC20MintableInstance.approve(AceInstance.address, transferAmount, {from: aliceEthereumAccount});\n        await AceInstance.publicApprove(ZkAssetMintableInstance.address, proof2.hash, transferAmount, {from:aliceEthereumAccount});\n        await ZkAssetMintableInstance.confidentialTransfer(data2, signatures2);\n\n        console.log('Alice\\'s balance : ' + await ERC20MintableInstance.balanceOf(aliceEthereumAccount));\n        console.log('Bob\\'s balance : ' + await ERC20MintableInstance.balanceOf(bobEthereumAccount));\n\n        //step 2\n        console.log('Convert Alice\\'s Aztec Note worth ' + transferAmount + ' to Bob\\'s ERC20 Tokens worth ' + transferAmount);\n        const bob0Note = await aztec.note.create(bobAztecAccount.publicKey, 0);\n        const proof3 = new JoinSplitProof([alice25Note], [bob0Note], accounts[0], transferAmount, bobEthereumAccount);\n        const data3 = proof3.encodeABI(ZkAssetMintableInstance.address);\n        const signatures3 = proof3.constructSignatures(ZkAssetMintableInstance.address, [aliceAztecAccount]);\n        await ZkAssetMintableInstance.confidentialTransfer(data3, signatures3);\n\n        console.log('Alice\\'s balance : ' + await ERC20MintableInstance.balanceOf(aliceEthereumAccount));\n        console.log('Bob\\'s balance : ' + await ERC20MintableInstance.balanceOf(bobEthereumAccount));\n    });\n});\n"
      ]
    },
    "sourceType": "script",
    "mtime": 1571149376291
  }
}