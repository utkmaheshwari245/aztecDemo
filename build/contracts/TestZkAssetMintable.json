{
  "contractName": "TestZkAssetMintable",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "JOIN_SPLIT_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ZERO_VALUE_NOTE_HASH",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PUBLIC_RANGE_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "bytes32"
        },
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "confidentialApproved",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proof",
          "type": "uint24"
        },
        {
          "name": "_proofData",
          "type": "bytes"
        }
      ],
      "name": "confidentialMint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_noteHash",
          "type": "bytes32"
        },
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_status",
          "type": "bool"
        },
        {
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "confidentialApprove",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "noteHash",
          "type": "bytes32"
        },
        {
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "updateNoteMetaData",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PRIVATE_RANGE_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "proofs",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_epoch",
          "type": "uint8"
        },
        {
          "name": "_proofs",
          "type": "uint256"
        }
      ],
      "name": "setProofs",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_proof",
          "type": "uint24"
        }
      ],
      "name": "supportsProof",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "DIVIDEND_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINT_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isOwner",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proofData",
          "type": "bytes"
        },
        {
          "name": "_signatures",
          "type": "bytes"
        }
      ],
      "name": "confidentialTransfer",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ace",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_proof",
          "type": "uint24"
        },
        {
          "name": "_proofOutput",
          "type": "bytes"
        }
      ],
      "name": "confidentialTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BURN_PROOF",
      "outputs": [
        {
          "name": "",
          "type": "uint24"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "EIP712_DOMAIN_HASH",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "linkedToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "scalingFactor",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "noteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "noteData",
          "type": "bytes"
        }
      ],
      "name": "UpdateTotalMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "aceAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "linkedTokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "scalingFactor",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "_canAdjustSupply",
          "type": "bool"
        },
        {
          "indexed": false,
          "name": "_canConvert",
          "type": "bool"
        }
      ],
      "name": "CreateZkAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "noteRegistryId",
          "type": "uint256"
        }
      ],
      "name": "CreateNoteRegistry",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "noteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "CreateNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "noteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "DestroyNote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "ConvertTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "RedeemTokens",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "noteHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "metadata",
          "type": "bytes"
        }
      ],
      "name": "UpdateNoteMetadata",
      "type": "event"
    }
  ],
  "metadata": "",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "pragma solidity >= 0.5.0 <0.7.0;\n\n\nimport \"openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\";\nimport \"@aztec/protocol/contracts/ERC1724/ZkAssetMintable.sol\";\nimport \"@aztec/protocol/contracts/ERC1724/ZkAsset.sol\";\n\n\ncontract TestERC20 is ERC20 {\n  function giveMeTokens(address _account, uint256 _value) public {\n    _mint(_account, _value);\n  }\n}\n\ncontract TestZkAssetMintable is ZkAssetMintable {\n\n}\n\ncontract TestZkAsset is ZkAsset {\n\n}\n",
  "sourcePath": "/Users/utkmaheshwari245/Work/Projects/my/aztec-ganache-starter-kit/contracts/TestERC20.sol",
  "ast": {
    "absolutePath": "/Users/utkmaheshwari245/Work/Projects/my/aztec-ganache-starter-kit/contracts/TestERC20.sol",
    "exportedSymbols": {
      "TestERC20": [
        88
      ],
      "TestZkAsset": [
        94
      ],
      "TestZkAssetMintable": [
        91
      ]
    },
    "id": 95,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 69,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:2"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 70,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 4033,
        "src": "35:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ERC1724/ZkAssetMintable.sol",
        "file": "@aztec/protocol/contracts/ERC1724/ZkAssetMintable.sol",
        "id": 71,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 1703,
        "src": "99:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ERC1724/ZkAsset.sol",
        "file": "@aztec/protocol/contracts/ERC1724/ZkAsset.sol",
        "id": 72,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 1676,
        "src": "163:55:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 73,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4032,
              "src": "243:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4032",
                "typeString": "contract ERC20"
              }
            },
            "id": 74,
            "nodeType": "InheritanceSpecifier",
            "src": "243:5:2"
          }
        ],
        "contractDependencies": [
          4032,
          4101
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 88,
        "linearizedBaseContracts": [
          88,
          4032,
          4101
        ],
        "name": "TestERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 86,
              "nodeType": "Block",
              "src": "316:34:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 82,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "328:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 83,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "338:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 81,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3918,
                      "src": "322:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "322:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "322:23:2"
                }
              ]
            },
            "documentation": null,
            "id": 87,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "giveMeTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76,
                  "name": "_account",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "275:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "275:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "293:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "293:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "274:34:2"
            },
            "returnParameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "316:0:2"
            },
            "scope": 88,
            "src": "253:97:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 95,
        "src": "221:131:2"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 89,
              "name": "ZkAssetMintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1702,
              "src": "386:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ZkAssetMintable_$1702",
                "typeString": "contract ZkAssetMintable"
              }
            },
            "id": 90,
            "nodeType": "InheritanceSpecifier",
            "src": "386:15:2"
          }
        ],
        "contractDependencies": [
          1702,
          2388,
          2755,
          2886,
          2960,
          3040,
          3199,
          3635
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 91,
        "linearizedBaseContracts": [
          91,
          1702,
          2755,
          2886,
          3635,
          2388,
          3199,
          2960,
          3040
        ],
        "name": "TestZkAssetMintable",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 95,
        "src": "354:52:2"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 92,
              "name": "ZkAsset",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1675,
              "src": "432:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ZkAsset_$1675",
                "typeString": "contract ZkAsset"
              }
            },
            "id": 93,
            "nodeType": "InheritanceSpecifier",
            "src": "432:7:2"
          }
        ],
        "contractDependencies": [
          1675,
          2388,
          2960,
          3040,
          3199
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 94,
        "linearizedBaseContracts": [
          94,
          1675,
          2388,
          3199,
          2960,
          3040
        ],
        "name": "TestZkAsset",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 95,
        "src": "408:36:2"
      }
    ],
    "src": "0:445:2"
  },
  "legacyAST": {
    "absolutePath": "/Users/utkmaheshwari245/Work/Projects/my/aztec-ganache-starter-kit/contracts/TestERC20.sol",
    "exportedSymbols": {
      "TestERC20": [
        88
      ],
      "TestZkAsset": [
        94
      ],
      "TestZkAssetMintable": [
        91
      ]
    },
    "id": 95,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 69,
        "literals": [
          "solidity",
          ">=",
          "0.5",
          ".0",
          "<",
          "0.7",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:2"
      },
      {
        "absolutePath": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "file": "openzeppelin-solidity/contracts/token/ERC20/ERC20.sol",
        "id": 70,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 4033,
        "src": "35:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ERC1724/ZkAssetMintable.sol",
        "file": "@aztec/protocol/contracts/ERC1724/ZkAssetMintable.sol",
        "id": 71,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 1703,
        "src": "99:63:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@aztec/protocol/contracts/ERC1724/ZkAsset.sol",
        "file": "@aztec/protocol/contracts/ERC1724/ZkAsset.sol",
        "id": 72,
        "nodeType": "ImportDirective",
        "scope": 95,
        "sourceUnit": 1676,
        "src": "163:55:2",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 73,
              "name": "ERC20",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 4032,
              "src": "243:5:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ERC20_$4032",
                "typeString": "contract ERC20"
              }
            },
            "id": 74,
            "nodeType": "InheritanceSpecifier",
            "src": "243:5:2"
          }
        ],
        "contractDependencies": [
          4032,
          4101
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 88,
        "linearizedBaseContracts": [
          88,
          4032,
          4101
        ],
        "name": "TestERC20",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 86,
              "nodeType": "Block",
              "src": "316:34:2",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 82,
                        "name": "_account",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 76,
                        "src": "328:8:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 83,
                        "name": "_value",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 78,
                        "src": "338:6:2",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 81,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 3918,
                      "src": "322:5:2",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 84,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "322:23:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 85,
                  "nodeType": "ExpressionStatement",
                  "src": "322:23:2"
                }
              ]
            },
            "documentation": null,
            "id": 87,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "giveMeTokens",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 79,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 76,
                  "name": "_account",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "275:16:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 75,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "275:7:2",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 78,
                  "name": "_value",
                  "nodeType": "VariableDeclaration",
                  "scope": 87,
                  "src": "293:14:2",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 77,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "293:7:2",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "274:34:2"
            },
            "returnParameters": {
              "id": 80,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "316:0:2"
            },
            "scope": 88,
            "src": "253:97:2",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 95,
        "src": "221:131:2"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 89,
              "name": "ZkAssetMintable",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1702,
              "src": "386:15:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ZkAssetMintable_$1702",
                "typeString": "contract ZkAssetMintable"
              }
            },
            "id": 90,
            "nodeType": "InheritanceSpecifier",
            "src": "386:15:2"
          }
        ],
        "contractDependencies": [
          1702,
          2388,
          2755,
          2886,
          2960,
          3040,
          3199,
          3635
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 91,
        "linearizedBaseContracts": [
          91,
          1702,
          2755,
          2886,
          3635,
          2388,
          3199,
          2960,
          3040
        ],
        "name": "TestZkAssetMintable",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 95,
        "src": "354:52:2"
      },
      {
        "baseContracts": [
          {
            "arguments": null,
            "baseName": {
              "contractScope": null,
              "id": 92,
              "name": "ZkAsset",
              "nodeType": "UserDefinedTypeName",
              "referencedDeclaration": 1675,
              "src": "432:7:2",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_ZkAsset_$1675",
                "typeString": "contract ZkAsset"
              }
            },
            "id": 93,
            "nodeType": "InheritanceSpecifier",
            "src": "432:7:2"
          }
        ],
        "contractDependencies": [
          1675,
          2388,
          2960,
          3040,
          3199
        ],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": false,
        "id": 94,
        "linearizedBaseContracts": [
          94,
          1675,
          2388,
          3199,
          2960,
          3040
        ],
        "name": "TestZkAsset",
        "nodeType": "ContractDefinition",
        "nodes": [],
        "scope": 95,
        "src": "408:36:2"
      }
    ],
    "src": "0:445:2"
  },
  "compiler": {
    "name": "solc",
    "version": "0.5.4+commit.9549d8ff.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.0.16",
  "updatedAt": "2019-09-30T15:53:37.874Z",
  "devdoc": {
    "methods": {
      "confidentialApprove(bytes32,address,bool,bytes)": {
        "details": "Note owner approving a third party, another address, to spend the note on owner's behalf. This is necessary to allow the confidentialTransferFrom() method to be called",
        "params": {
          "_noteHash": "- keccak256 hash of the note coordinates (gamma and sigma)",
          "_signature": "- ECDSA signature from the note owner that validates the confidentialApprove() instruction",
          "_spender": "- address being approved to spend the note",
          "_status": "- defines whether the _spender address is being approved to spend the note, or if permission is being revoked"
        }
      },
      "confidentialMint(uint24,bytes)": {
        "details": "Executes a confidential minting procedure, dependent on the provided proofData being succesfully validated by the zero-knowledge validator",
        "params": {
          "_proof": "- uint24 variable which acts as a unique identifier for the proof which _proofOutput is being submitted. _proof contains three concatenated uint8 variables: 1) epoch number 2) category number 3) ID number for the proof",
          "_proofData": "- bytes array of proof data, outputted from a proof construction"
        }
      },
      "confidentialTransfer(bytes,bytes)": {
        "details": "Executes a basic unilateral, confidential transfer of AZTEC notes adapted for use with a mintable ZkAsset.    * Will submit _proofData to the validateProof() function of the Cryptography Engine.    * If public value is being transferred out of the ACE, and the minted value is greater than ACE's token balance, then tokens will be minted from the linked ERC20 token using supplementTokens()    * Upon successfull verification, it will update note registry state - creating output notes and destroying input notes.",
        "params": {
          "_proofData": "bytes variable outputted from proof construction",
          "_signatures": "ECDSA signatures over all input notes involved in the confidentialTransfer()"
        }
      },
      "confidentialTransferFrom(uint24,bytes)": {
        "details": "Executes a value transfer mediated by smart contracts. The method is supplied with transfer instructions represented by a bytes _proofOutput argument that was outputted from a proof verification contract. Adapted for use with a mintable ZkAsset. If public value is being transferred out of the ACE, and the minted value is greater than ACE's token balance, then tokens will be minted from the linked ERC20 token using supplementTokens() ",
        "params": {
          "_proof": "- uint24 variable which acts as a unique identifier for the proof which _proofOutput is being submitted. _proof contains three concatenated uint8 variables: 1) epoch number 2) category number 3) ID number for the proof",
          "_proofOutput": "- output of a zero-knowledge proof validation contract. Represents transfer instructions for the ACE"
        }
      },
      "isOwner()": {
        "details": "Returns true if the caller is the current owner."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * > Note: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateNoteMetaData(bytes32,bytes)": {
        "details": "Update the metadata of a note that already exists in storage. ",
        "params": {
          "metadata": "- metadata to update the note with. This should be the length of an IES encrypted viewing key, 0x177",
          "noteHash": "- hash of a note, used as a unique identifier for the note"
        }
      }
    }
  },
  "userdoc": {
    "methods": {}
  }
}